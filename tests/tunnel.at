AT_BANNER([tunnel])

AT_SETUP([tunnel - input])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 ofport_request=1\
                    -- add-port br0 p2 -- set Interface p2 type=gre \
                    options:local_ip=2.2.2.2 options:remote_ip=1.1.1.1 \
                    ofport_request=2 \
                    -- add-port br0 p3 -- set Interface p3 type=gre \
                    options:remote_ip=2.2.2.2 ofport_request=3])
AT_DATA([flows.txt], [dnl
actions=IN_PORT
])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: remote_ip=1.1.1.1)
    p2 2/1: (gre: local_ip=2.2.2.2, remote_ip=1.1.1.1)
    p3 3/1: (gre: remote_ip=2.2.2.2)
])

dnl remote_ip
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=1.2.3.4,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,flags(df))),1
])

dnl local_ip, remote_ip
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.2,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(src=2.2.2.2,dst=1.1.1.1,ttl=64,flags(df))),1
])

dnl reconfigure, local_ip, remote_ip
AT_CHECK([ovs-vsctl set Interface p2 type=gre options:local_ip=2.2.2.3 \
          options:df_default=false options:ttl=1 options:csum=true \
          -- set Interface p3 type=vxlan])
AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: remote_ip=1.1.1.1)
    p2 2/1: (gre: csum=true, df_default=false, local_ip=2.2.2.3, remote_ip=1.1.1.1, ttl=1)
    p3 3/4789: (vxlan: remote_ip=2.2.2.2)
])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.2,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,flags(df))),1
])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.3,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(src=2.2.2.3,dst=1.1.1.1,ttl=1,flags(csum))),1
])

dnl nonexistent tunnel
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=5.5.5.5,dst=6.6.6.6,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [2], [ignore], [dnl
no OpenFlow tunnel port for this packet
ovs-appctl: ovs-vswitchd: server returned an error
])

OVS_VSWITCHD_STOP(["/receive tunnel port not found/d"])
AT_CLEANUP

AT_SETUP([tunnel - ECN decapsulation])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2])
AT_DATA([flows.txt], [dnl
actions=2
])

AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: remote_ip=1.1.1.1)
    p2 2/2: (dummy)
])

dnl Tunnel CE and encapsulated packet CE
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.2,tos=0x3,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=3,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=2.2.2.2,tun_tos=3,tun_flags=-df-csum-key,in_port=1,nw_ecn=3,nw_frag=no
Datapath actions: 2
])

dnl Tunnel CE and encapsulated packet ECT(1)
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.2,tos=0x3,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=1,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=2.2.2.2,tun_tos=3,tun_flags=-df-csum-key,in_port=1,nw_ecn=1,nw_frag=no
Datapath actions: set(ipv4(tos=0x3/0x3)),2
])

dnl Tunnel CE and encapsulated packet ECT(2)
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.2,tos=0x3,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=2,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=2.2.2.2,tun_tos=3,tun_flags=-df-csum-key,in_port=1,nw_ecn=2,nw_frag=no
Datapath actions: set(ipv4(tos=0x3/0x3)),2
])

dnl Tunnel CE and encapsulated packet Non-ECT
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.2,tos=0x3,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -3 stdout], [0],
  [Final flow: unchanged
Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=2.2.2.2,tun_tos=3,tun_flags=-df-csum-key,in_port=1,nw_ecn=0,nw_frag=no
Datapath actions: drop
])
OVS_VSWITCHD_STOP(["/dropping tunnel packet marked ECN CE but is not ECN capable/d"])
AT_CLEANUP

AT_SETUP([tunnel - input with matching tunnel mask])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 \
                    ofport_request=1	\
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: remote_ip=1.1.1.1)
    p2 2/2: (dummy)
])

AT_CHECK([ovs-appctl dpctl/add-flow "tunnel(dst=1.1.1.1,src=3.3.3.200/255.255.255.0,tp_dst=123,tp_src=1,ttl=64),recirc_id(0),in_port(1),eth(),eth_type(0x0800),ipv4()" "2"])

AT_CHECK([ovs-appctl dpctl/dump-flows | tail -1], [0], [dnl
tunnel(src=3.3.3.200/255.255.255.0,dst=1.1.1.1,ttl=64,tp_src=1,tp_dst=123),recirc_id(0),in_port(1),eth_type(0x0800), packets:0, bytes:0, used:never, actions:2
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - output])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 options:local_ip=2.2.2.2 \
                    options:key=5 ofport_request=1\
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2])
AT_DATA([flows.txt], [dnl
actions=output:1
])

OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: key=5, local_ip=2.2.2.2, remote_ip=1.1.1.1)
    p2 2/2: (dummy)
])

dnl Basic
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=4,ttl=128,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x5,src=2.2.2.2,dst=1.1.1.1,ttl=64,flags(df|key))),1
])

dnl ECN
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=1,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x5,src=2.2.2.2,dst=1.1.1.1,tos=0x1,ttl=64,flags(df|key))),1
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - unencrypted tunnel and not setting skb_mark])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 options:local_ip=2.2.2.2 \
                    options:key=5 ofport_request=1\
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2])
AT_DATA([flows.txt], [dnl
actions=output:1
])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=4,ttl=128,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x5,src=2.2.2.2,dst=1.1.1.1,ttl=64,flags(df|key))),1
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - unencrypted tunnel and setting skb_mark to 1])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 options:local_ip=2.2.2.2 \
                    options:key=5 ofport_request=1\
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2])
AT_DATA([flows.txt], [dnl
actions=load:0x1->NXM_NX_PKT_MARK[[]],output:1
])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=4,ttl=128,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x5,src=2.2.2.2,dst=1.1.1.1,ttl=64,flags(df|key))),set(skb_mark(0x1)),1
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - unencrypted tunnel and setting skb_mark to 2])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 options:local_ip=2.2.2.2 \
                    options:key=5 ofport_request=1\
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2])
AT_DATA([flows.txt], [dnl
actions=load:0x2->NXM_NX_PKT_MARK[[]],output:1
])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=4,ttl=128,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x5,src=2.2.2.2,dst=1.1.1.1,ttl=64,flags(df|key))),set(skb_mark(0x2)),1
])

AT_CHECK([ovs-appctl netdev-dummy/receive p2 'aa55aa550001f8bc124434b6080045000054ba20000040018486010103580101037001004227e75400030af3195500000000f265010000000000101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f3031323334353637'])

ovs-appctl time/warp 5000

AT_CHECK([
ovs-appctl coverage/read-counter datapath_drop_invalid_port
], [0], [dnl
1
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - ToS and TTL inheritance])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 options:tos=inherit \
                    options:ttl=inherit ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2])
AT_DATA([flows.txt], [dnl
actions=output:1
])

OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: remote_ip=1.1.1.1, tos=inherit, ttl=inherit)
    p2 2/2: (dummy)
])

dnl Basic
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=4,ttl=128,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(dst=1.1.1.1,tos=0x4,ttl=128,flags(df))),1
])

dnl ECN
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=5,ttl=128,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(dst=1.1.1.1,tos=0x5,ttl=128,flags(df))),1
])

dnl non-IP
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0806),arp(sip=1.2.3.4,tip=5.6.7.8,op=1,sha=00:0f:10:11:12:13,tha=00:14:15:16:17:18)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,flags(df))),1
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - set_tunnel])
OVS_VSWITCHD_START([dnl
    add-port br0 p1 -- set Interface p1 type=gre options:key=flow \
        options:remote_ip=1.1.1.1 ofport_request=1 \
    -- add-port br0 p2 -- set Interface p2 type=gre options:key=flow \
        options:remote_ip=2.2.2.2 ofport_request=2 \
    -- add-port br0 p3 -- set Interface p3 type=gre options:key=flow \
        options:remote_ip=3.3.3.3 ofport_request=3 \
    -- add-port br0 p4 -- set Interface p4 type=gre options:key=flow \
        options:remote_ip=4.4.4.4 ofport_request=4])
AT_DATA([flows.txt], [dnl
actions=set_tunnel:1,output:1,set_tunnel:2,output:2,set_tunnel:3,output:3,set_tunnel:5,output:4
])

OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: key=flow, remote_ip=1.1.1.1)
    p2 2/1: (gre: key=flow, remote_ip=2.2.2.2)
    p3 3/1: (gre: key=flow, remote_ip=3.3.3.3)
    p4 4/1: (gre: key=flow, remote_ip=4.4.4.4)
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(100),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [Datapath actions: dnl
set(tunnel(tun_id=0x1,dst=1.1.1.1,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x2,dst=2.2.2.2,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x3,dst=3.3.3.3,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x5,dst=4.4.4.4,ttl=64,flags(df|key))),1
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - key])
OVS_VSWITCHD_START([dnl
    add-port br0 p1 -- set Interface p1 type=gre options:key=1 \
        options:remote_ip=1.1.1.1 ofport_request=1 \
    -- add-port br0 p2 -- set Interface p2 type=gre options:in_key=2 \
        options:out_key=3 options:remote_ip=1.1.1.1 ofport_request=2 \
    -- add-port br0 p3 -- set Interface p3 type=gre options:out_key=5 \
        options:remote_ip=1.1.1.1 ofport_request=3])
AT_DATA([flows.txt], [dnl
actions=IN_PORT,output:1,output:2,output:3
])

OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: key=1, remote_ip=1.1.1.1)
    p2 2/1: (gre: in_key=2, out_key=3, remote_ip=1.1.1.1)
    p3 3/1: (gre: out_key=5, remote_ip=1.1.1.1)
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0x1,src=1.1.1.1,dst=2.2.2.2,ttl=64,flags(key)),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [Datapath actions: dnl
set(tunnel(tun_id=0x1,dst=1.1.1.1,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x3,dst=1.1.1.1,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x5,dst=1.1.1.1,ttl=64,flags(df|key))),1
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0x2,src=1.1.1.1,dst=2.2.2.2,ttl=64,flags(key)),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [Datapath actions: dnl
set(tunnel(tun_id=0x3,dst=1.1.1.1,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x1,dst=1.1.1.1,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x5,dst=1.1.1.1,ttl=64,flags(df|key))),1
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(src=1.1.1.1,dst=2.2.2.2,ttl=64,flags()),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [Datapath actions: dnl
set(tunnel(tun_id=0x5,dst=1.1.1.1,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x1,dst=1.1.1.1,ttl=64,flags(df|key))),1,dnl
set(tunnel(tun_id=0x3,dst=1.1.1.1,ttl=64,flags(df|key))),1
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0xf,src=1.1.1.1,dst=2.2.2.2,ttl=64,flags(key)),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [2], [ignore], [dnl
no OpenFlow tunnel port for this packet
ovs-appctl: ovs-vswitchd: server returned an error
])
OVS_VSWITCHD_STOP(["/receive tunnel port not found/d"])
AT_CLEANUP

AT_SETUP([tunnel - key match])
OVS_VSWITCHD_START([dnl
    add-port br0 p1 -- set Interface p1 type=gre options:key=flow \
        options:remote_ip=1.1.1.1 ofport_request=1 \
    -- add-port br0 p2 -- set Interface p2 type=gre options:key=3 \
        options:remote_ip=3.3.3.3 ofport_request=2 \
    -- add-port br0 p3 -- set Interface p3 type=dummy ofport_request=3 \
    -- add-port br0 p4 -- set Interface p4 type=dummy ofport_request=4 \
    -- add-port br0 p5 -- set Interface p5 type=dummy ofport_request=5])
AT_DATA([flows.txt], [dnl
tun_id=2,actions=output:3
tun_id=3,actions=output:4,set_tunnel:2,resubmit:99,set_tunnel:4,output:2,resubmit:99
tun_id=4,actions=output:5
])

OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (gre: key=flow, remote_ip=1.1.1.1)
    p2 2/1: (gre: key=3, remote_ip=3.3.3.3)
    p3 3/3: (dummy)
    p4 4/4: (dummy)
    p5 5/5: (dummy)
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0x2,src=1.1.1.1,dst=2.2.2.2,ttl=64,flags(key)),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [dnl
Datapath actions: 3
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0x3,src=1.1.1.1,dst=2.2.2.2,ttl=64,flags(key)),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [dnl
Datapath actions: 4,3,set(tunnel(tun_id=0x3,dst=3.3.3.3,ttl=64,flags(df|key))),1,5
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0x3,src=3.3.3.3,dst=2.2.2.2,ttl=64,flags(key)),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [dnl
Datapath actions: 4,3,5
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0x0,src=1.1.1.1,dst=2.2.2.2,ttl=64,flags(key)),in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=6,tos=0,ttl=64,frag=no),tcp(src=8,dst=9)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0], [dnl
Datapath actions: drop
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - Geneve])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=geneve \
                    options:remote_ip=1.1.1.1 ofport_request=1 options:dst_port=5000])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/5000: (geneve: dst_port=5000, remote_ip=1.1.1.1)
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - VXLAN])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=vxlan \
                    options:remote_ip=1.1.1.1 ofport_request=1])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/4789: (vxlan: remote_ip=1.1.1.1)
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - table version])
dnl check if changes in the egress bridge flow table affects
dnl discovering the link layer address of tunnel endpoints.
OVS_VSWITCHD_START([add-port br0 p0 -- set Interface p0 type=dummy ofport_request=1 other-config:hwaddr=aa:55:aa:55:00:00])
AT_CHECK([ovs-vsctl add-br int-br -- set bridge int-br datapath_type=dummy], [0])
AT_CHECK([ovs-vsctl add-port int-br v1 -- set Interface v1 type=vxlan \
                       options:remote_ip=172.31.1.2 options:key=123 \
                       ofport_request=2 \
                 -- add-port int-br v2 -- set Interface v2 type=internal \
                       ofport_request=3 \
                       ], [0])

AT_CHECK([ovs-appctl dpif/show], [0], [dnl
dummy@ovs-dummy: hit:0 missed:0
  br0:
    br0 65534/100: (dummy-internal)
    p0 1/1: (dummy)
  int-br:
    int-br 65534/2: (dummy-internal)
    v1 2/4789: (vxlan: key=123, remote_ip=172.31.1.2)
    v2 3/3: (dummy-internal)
])

dnl First setup dummy interface IP address, then add the route
dnl so that tnl-port table can get valid IP address for the device.
AT_CHECK([ovs-appctl netdev-dummy/ip4addr br0 172.31.1.1/24], [0], [OK
])
AT_CHECK([ovs-appctl ovs/route/add 172.31.1.0/24 br0], [0], [OK
])

dnl change the flow table to bump the internal table version
AT_CHECK([ovs-ofctl add-flow int-br action=normal])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 action=normal])

dnl Check Neighbour discovery.
AT_CHECK([ovs-vsctl -- set Interface p0 options:pcap=p0.pcap])

AT_CHECK([ovs-appctl netdev-dummy/receive int-br 'in_port(2),eth(src=aa:55:aa:55:00:00,dst=f8:bc:12:ff:ff:ff),eth_type(0x0800),ipv4(src=1.1.3.92,dst=1.1.3.88,proto=1,tos=0,ttl=64,frag=no),icmp(type=0,code=0)'])
AT_CHECK([ovs-pcap p0.pcap > p0.pcap.txt 2>&1])

dnl When the wrong version is used, the flow is not visible and the
dnl packet is dropped.
AT_CHECK([cat p0.pcap.txt | grep ffffffffffffaa55aa55000008060001080006040001aa55aa550000ac1f0101000000000000ac1f0102 | uniq], [0], [dnl
ffffffffffffaa55aa55000008060001080006040001aa55aa550000ac1f0101000000000000ac1f0102
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - LISP])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=lisp \
                    options:remote_ip=1.1.1.1 ofport_request=1])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/4341: (lisp: remote_ip=1.1.1.1)
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - ERSPAN])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=erspan \
                    options:remote_ip=1.1.1.1 options:key=1 options:erspan_ver=1 \
                    options:erspan_idx=0x0 ofport_request=1 \
                 -- add-port br0 p2 -- set Interface p2 type=erspan \
                    options:remote_ip=1.1.1.1 ofport_request=2 \
                    options:key=flow options:erspan_ver=1 options:erspan_idx=flow \
                 -- add-port br0 p3 -- set Interface p3 type=erspan \
                    options:remote_ip=1.1.1.1 ofport_request=3 \
                    options:key=10 options:erspan_ver=2 options:erspan_dir=flow \
                    options:erspan_hwid=flow \
                 -- add-port br0 p4 -- set Interface p4 type=erspan \
                    options:remote_ip=1.2.3.4 ofport_request=4 \
                    options:key=flow options:erspan_ver=flow\
                 ])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (erspan: erspan_idx=0x0, erspan_ver=1, key=1, remote_ip=1.1.1.1)
    p2 2/1: (erspan: erspan_idx=flow, erspan_ver=1, key=flow, remote_ip=1.1.1.1)
    p3 3/1: (erspan: erspan_dir=flow, erspan_hwid=flow, erspan_ver=2, key=10, remote_ip=1.1.1.1)
    p4 4/1: (erspan: erspan_dir=flow, erspan_hwid=flow, erspan_idx=flow, erspan_ver=flow, key=flow, remote_ip=1.2.3.4)
])

dnl Check ERSPAN v1 flow-based tunnel push
AT_CHECK([ovs-ofctl add-flow br0 "in_port=1, actions=set_tunnel:11,set_field:0x1->tun_erspan_idx,2"])

dnl Check ERSPAN v2 flow-based tunnel push
AT_CHECK([ovs-ofctl add-flow br0 "in_port=2, actions=set_field:1->tun_erspan_dir,set_field:0x0->tun_erspan_hwid,3"])

AT_CHECK([ovs-ofctl add-flow br0 "in_port=3, actions=set_field:2->tun_erspan_ver,set_field:1->tun_erspan_dir,set_field:0x0->tun_erspan_hwid,4"])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip],
[0], [dnl
NXST_FLOW reply:
 in_port=1 actions=set_tunnel:0xb,set_field:0x1->tun_erspan_idx,output:2
 in_port=2 actions=set_field:1->tun_erspan_dir,set_field:0->tun_erspan_hwid,output:3
 in_port=3 actions=set_field:2->tun_erspan_ver,set_field:1->tun_erspan_dir,set_field:0->tun_erspan_hwid,output:4
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - different VXLAN UDP port])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=vxlan \
                    options:remote_ip=1.1.1.1 ofport_request=1 options:dst_port=4341])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/4341: (vxlan: dst_port=4341, remote_ip=1.1.1.1)
])

dnl change UDP port

AT_CHECK([ovs-vsctl -- set Interface p1 options:dst_port=5000])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/5000: (vxlan: dst_port=5000, remote_ip=1.1.1.1)
])

dnl change UDP port to default

AT_CHECK([ovs-vsctl -- set Interface p1 options:dst_port=4789])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/4789: (vxlan: remote_ip=1.1.1.1)
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([ofproto-dpif - set_field - tun_src/tun_dst/tun_id])
OVS_VSWITCHD_START([dnl
    add-port br0 p1 -- set Interface p1 type=gre options:key=flow \
        options:remote_ip=1.1.1.1 ofport_request=1 \
    -- add-port br0 p2 -- set Interface p2 type=gre options:key=flow \
        options:remote_ip=flow ofport_request=2 \
    -- add-port br0 p3 -- set Interface p3 type=gre options:key=flow \
        options:remote_ip=flow options:local_ip=flow ofport_request=3 \
    -- add-port br0 p4 -- set Interface p4 type=gre options:key=3 \
        options:remote_ip=flow ofport_request=4 \
    -- add-port br0 p5 -- set Interface p5 type=gre options:key=flow \
        options:remote_ip=5.5.5.5 ofport_request=5])

OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP
add_of_ports br0 90
AT_DATA([flows.txt], [dnl
in_port=90 actions=resubmit:1,resubmit:2,resubmit:3,resubmit:4,resubmit:5
in_port=1 actions=set_field:42->tun_id,output:1
in_port=2 actions=set_field:3.3.3.3->tun_dst,output:2
in_port=3 actions=set_field:1.1.1.1->tun_src,set_field:4.4.4.4->tun_dst,output:3
in_port=4 actions=set_field:2.2.2.2->tun_dst,output:4
in_port=5 actions=set_field:5->tun_id
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(90),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x2a,dst=1.1.1.1,ttl=64,flags(df|key))),1,set(tunnel(tun_id=0x2a,dst=3.3.3.3,ttl=64,flags(df|key))),1,set(tunnel(tun_id=0x2a,src=1.1.1.1,dst=4.4.4.4,ttl=64,flags(df|key))),1,set(tunnel(tun_id=0x3,dst=2.2.2.2,ttl=64,flags(df|key))),1
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - ERSPAN v1/v2 metadata])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=dummy \
                        ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                        ofport_request=2])

# Add these ports separately to ensure that they get the datapath port
# number expected below.
ovs-vsctl -- add-port br0 p3 \
          -- set Interface p3 type=erspan \
                              ofport_request=3 \
                              options:remote_ip=1.1.1.1 \
                              options:key=1 options:erspan_ver=1 \
                              options:erspan_idx=7 \
          -- add-port br0 p4 \
          -- set Interface p4 type=erspan \
                              ofport_request=4 \
                              options:remote_ip=1.1.1.2 \
                              options:key=2 options:erspan_ver=2 \
                              options:erspan_dir=1 \
                              options:erspan_hwid=7
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/1: (dummy)
    p2 2/2: (dummy)
    p3 3/3: (erspan: erspan_idx=0x7, erspan_ver=1, key=1, remote_ip=1.1.1.1)
    p4 4/3: (erspan: erspan_dir=1, erspan_hwid=0x7, erspan_ver=2, key=2, remote_ip=1.1.1.2)
])

AT_DATA([flows.txt], [dnl
in_port=1,actions=3
in_port=2,actions=4
in_port=3,tun_erspan_ver=1,tun_erspan_idx=0x7,actions=1
in_port=4,tun_erspan_ver=2,tun_erspan_dir=1,tun_erspan_hwid=0xf/0x1,actions=2
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

dnl test encap: in_port=1,actions=3 (erspan v1 port)
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x1,dst=1.1.1.1,ttl=64,erspan(ver=1,idx=0x7),flags(df|key))),3
])

dnl test encap: in_port=2,actions=4 (erspan v2 port)
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x2,dst=1.1.1.2,ttl=64,erspan(ver=2,dir=1,hwid=0x7),flags(df|key))),3
])

dnl receive packet from ERSPAN port with v1 metadata
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x1,src=1.1.1.1,dst=2.2.2.2,ttl=64,erspan(ver=1,idx=0x7),flags(df|key)),in_port(3),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0x1,tun_src=1.1.1.1,tun_dst=2.2.2.2,tun_tos=0,tun_erspan_ver=1,tun_erspan_idx=0x7,tun_flags=+df-csum+key,in_port=3,nw_frag=no
Datapath actions: 1
])

dnl receive packet from ERSPAN port with wrong v1 metadata
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x1,src=1.1.1.1,dst=2.2.2.2,ttl=64,erspan(ver=1,idx=0xabcd),flags(df|key)),in_port(3),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0x1,tun_src=1.1.1.1,tun_dst=2.2.2.2,tun_tos=0,tun_erspan_ver=1,tun_erspan_idx=0xabcd,tun_flags=+df-csum+key,in_port=3,nw_frag=no
Datapath actions: drop
])

dnl receive packet from ERSPAN port with v2 metadata
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x2,src=1.1.1.2,dst=2.2.2.2,ttl=64,erspan(ver=2,dir=1,hwid=0x7),flags(df|key)),in_port(3),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0x2,tun_src=1.1.1.2,tun_dst=2.2.2.2,tun_tos=0,tun_erspan_ver=2,tun_erspan_dir=1,tun_erspan_hwid=0x1,tun_flags=+df-csum+key,in_port=4,nw_frag=no
Datapath actions: 2
])

dnl receive packet from ERSPAN port with wrong v2 metadata
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x2,src=1.1.1.2,dst=2.2.2.2,ttl=64,erspan(ver=2,dir=0,hwid=0x17),flags(df|key)),in_port(3),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0x2,tun_src=1.1.1.2,tun_dst=2.2.2.2,tun_tos=0,tun_erspan_ver=2,tun_erspan_dir=0,tun_erspan_hwid=0x1,tun_flags=+df-csum+key,in_port=4,nw_frag=no
Datapath actions: drop
])

dnl test wildcard mask: recevie all v2 regardless of its metadata
AT_CHECK([ovs-ofctl del-flows br0 in_port=4,tun_erspan_ver=2,tun_erspan_dir=1,tun_erspan_hwid=0xf/0x1])
AT_CHECK([ovs-ofctl add-flow br0 in_port=4,tun_erspan_ver=2,tun_erspan_dir=0/0,tun_erspan_hwid=0x0/0x0,actions=2])

AT_CHECK([ovs-ofctl --sort=in_port dump-flows br0 | ofctl_strip],
[0], [dnl
 in_port=1 actions=output:3
 in_port=2 actions=output:4
 tun_erspan_ver=1,tun_erspan_idx=0x7,in_port=3 actions=output:1
 tun_erspan_ver=2,in_port=4 actions=output:2
])

dnl this time it won't drop
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x2,src=1.1.1.2,dst=2.2.2.2,ttl=64,erspan(ver=2,dir=0,hwid=0x17),flags(df|key)),in_port(3),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0x2,tun_src=1.1.1.2,tun_dst=2.2.2.2,tun_tos=0,tun_erspan_ver=2,tun_flags=+df-csum+key,in_port=4,nw_frag=no
Datapath actions: 2
])

dnl flow-based erspan_idx options
AT_CHECK([ovs-vsctl add-port br0 p5 -- set Interface p5 type=erspan \
          options:remote_ip=1.1.1.2 ofport_request=5 \
          options:key=flow options:erspan_ver=1 options:erspan_idx=flow])

AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-flow br0 "in_port=1, actions=set_tunnel:11,set_field:0x7->tun_erspan_idx,5"])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip],
[0], [dnl
NXST_FLOW reply:
 in_port=1 actions=set_tunnel:0xb,set_field:0x7->tun_erspan_idx,output:5
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0xb,dst=1.1.1.2,ttl=64,erspan(ver=1,idx=0x7),flags(df|key))),3
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - Geneve metadata])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=geneve \
                    options:remote_ip=1.1.1.1 ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=0,len=4}->tun_metadata0,{class=0xffff,type=1,len=8}->tun_metadata1"])

AT_DATA([flows.txt], [dnl
in_port=2,actions=set_field:0xa->tun_metadata0,set_field:0x1234567890abcdef->tun_metadata1,1
tun_metadata0=0xb/0xf,actions=2
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

dnl Option generation
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(2),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,tp_dst=6081,geneve({class=0xffff,type=0,len=4,0xa}{class=0xffff,type=0x1,len=8,0x1234567890abcdef}),flags(df))),6081
])

dnl Option match
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0xb}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata0=0xb/0xf,in_port=1,nw_frag=no
Datapath actions: 2
])

dnl Skip unknown option
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0xb}{class=0xffff,type=2,len=4,0xc}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata0=0xb/0xf,in_port=1,nw_frag=no
Datapath actions: 2
])

dnl Check mapping table constraints
AT_CHECK([ovs-ofctl del-flows br0])
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=2,len=124}->tun_metadata2,{class=0xffff,type=3,len=124}->tun_metadata3"], [1], [ignore],
[OFPT_ERROR (xid=0x4): NXTTMFC_TABLE_FULL
NXT_TLV_TABLE_MOD (xid=0x4):
 ADD mapping table:
  class  type  length  match field
 ------  ----  ------  --------------
 0xffff   0x2     124  tun_metadata2
 0xffff   0x3     124  tun_metadata3
])

AT_CHECK([ovs-ofctl add-flow br0 "tun_metadata0,tun_metadata0,actions=drop"], [1], [ignore],
[ovs-ofctl: field tun_metadata0 set multiple times
])

AT_CHECK([ovs-ofctl add-flow br0 "tun_metadata0=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef,tun_metadata1=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef,tun_metadata2=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef,tun_metadata3=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef,tun_metadata4=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef,actions=drop"], [1], [ignore],
[ovs-ofctl: field tun_metadata4 exceeds maximum size for tunnel metadata (used 320, max 256)
])

dnl Allocation and match with fragmented address space
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=2,len=124}->tun_metadata2"])
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=3,len=4}->tun_metadata3"])
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=4,len=112}->tun_metadata4"])
AT_CHECK([ovs-ofctl del-tlv-map br0 "{class=0xffff,type=3,len=4}->tun_metadata3"])
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=3,len=8}->tun_metadata3"])

AT_CHECK([ovs-ofctl add-flow br0 tun_metadata3=0x1234567890abcdef,actions=2])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=3,len=8,0x1234567890abcdef}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata3=0x1234567890abcdef,in_port=1,nw_frag=no
Datapath actions: 2
])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip],
[0], [dnl
NXST_FLOW reply:
 tun_metadata3=0x1234567890abcdef actions=output:2
])

dnl A TLV mapping should not be removed if any active flow uses the mapping.
AT_CHECK([ovs-ofctl del-tlv-map br0], [1], [], [dnl
OFPT_ERROR (xid=0x4): NXTTMFC_INVALID_TLV_DEL
NXT_TLV_TABLE_MOD (xid=0x4):
 CLEAR
])

AT_CHECK([ovs-ofctl del-flows br0], [0])
AT_CHECK([ovs-ofctl del-tlv-map br0], [0])

dnl Flow modification
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=1,len=4}->tun_metadata0"])
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=2,len=4}->tun_metadata1"])
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=3,len=4}->tun_metadata2"])

AT_CHECK([ovs-ofctl add-flow br0 "in_port=1 actions=multipath(eth_src,50,modulo_n,1,0,tun_metadata0[[0..31]])"])
AT_CHECK([ovs-ofctl add-flow br0 "in_port=2 actions=push:tun_metadata1[[0..31]],clone(move:tun_metadata2[[0..31]]->reg0[[0..31]])"])

AT_CHECK([ovs-ofctl add-flow br0 "in_port=1 actions=output:4"])
AT_CHECK([ovs-ofctl del-tlv-map br0 "{class=0xffff,type=3,len=4}->tun_metadata0"])

AT_CHECK([ovs-ofctl add-flow br0 "in_port=2 actions=push:tun_metadata2[[0..31]]"])
AT_CHECK([ovs-ofctl del-tlv-map br0 "{class=0xffff,type=2,len=4}->tun_metadata1"])
AT_CHECK([ovs-ofctl del-tlv-map br0 "{class=0xffff,type=3,len=4}->tun_metadata2"], [1], [], [dnl
OFPT_ERROR (xid=0x4): NXTTMFC_INVALID_TLV_DEL
NXT_TLV_TABLE_MOD (xid=0x4):
 DEL mapping table:
  class  type  length  match field
 ------  ----  ------  --------------
 0xffff   0x3       4  tun_metadata2
])

AT_CHECK([ovs-ofctl del-flows br0], [0])
AT_CHECK([ovs-ofctl del-tlv-map br0], [0])

dnl Learn action
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=1,len=4}->tun_metadata1"])
AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=2,len=4}->tun_metadata2"])
AT_CHECK([ovs-ofctl add-flow br0 "in_port=2, eth_src=00:00:00:00:00:01 actions=learn(tun_metadata1[[0..31]]=reg1, output:NXM_OF_IN_PORT[[]])"])
AT_CHECK([ovs-ofctl add-flow br0 "in_port=2, eth_src=00:00:00:00:00:02 actions=learn(reg1[[0..31]]=0xFF, load:reg1[[0..31]]->tun_metadata2[[0..31]])"])
flow1="in_port(2),eth(src=00:00:00:00:00:01,dst=ff:ff:ff:ff:ff:ff),eth_type(0x0800)"
flow2="in_port(2),eth(src=00:00:00:00:00:02,dst=ff:ff:ff:ff:ff:ff),eth_type(0x0800)"
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy "$flow1" -generate], [0], [stdout])
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy "$flow2" -generate], [0], [stdout])

dnl Delete flows with learn action
AT_CHECK([ovs-ofctl del-flows br0 "in_port=2"])

AT_CHECK([ovs-ofctl del-tlv-map br0 "{class=0xffff,type=1,len=4}->tun_metadata1"], [1], [], [dnl
OFPT_ERROR (xid=0x4): NXTTMFC_INVALID_TLV_DEL
NXT_TLV_TABLE_MOD (xid=0x4):
 DEL mapping table:
  class  type  length  match field
 ------  ----  ------  --------------
 0xffff   0x1       4  tun_metadata1
])
AT_CHECK([ovs-ofctl del-flows br0 "tun_metadata1"])
AT_CHECK([ovs-ofctl del-tlv-map br0 "{class=0xffff,type=1,len=4}->tun_metadata1"])

AT_CHECK([ovs-ofctl del-tlv-map br0 "{class=0xffff,type=2,len=4}->tun_metadata2"], [1], [], [dnl
OFPT_ERROR (xid=0x4): NXTTMFC_INVALID_TLV_DEL
NXT_TLV_TABLE_MOD (xid=0x4):
 DEL mapping table:
  class  type  length  match field
 ------  ----  ------  --------------
 0xffff   0x2       4  tun_metadata2
])
AT_CHECK([ovs-ofctl del-flows br0 "reg1=0xFF"])
AT_CHECK([ovs-ofctl del-tlv-map br0], [0])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - Geneve option present])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=geneve \
                    options:remote_ip=1.1.1.1 ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=0,len=4}->tun_metadata0,{class=0xffff,type=1,len=0}->tun_metadata1,{class=0xffff,type=2,len=4}->tun_metadata2"])

AT_DATA([flows.txt], [dnl
priority=1,tun_metadata0,actions=2
priority=2,tun_metadata1=0,actions=IN_PORT
priority=3,tun_metadata2=0,actions=drop
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | sort],
[0], [dnl
 priority=1,tun_metadata0 actions=output:2
 priority=2,tun_metadata1 actions=IN_PORT
 priority=3,tun_metadata2=0 actions=drop
NXST_FLOW reply:
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0x12345678}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata0,tun_metadata1=NP,tun_metadata2=NP,in_port=1,nw_frag=no
Datapath actions: 2
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=1,len=0}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata1,tun_metadata2=NP,in_port=1,nw_ecn=0,nw_frag=no
Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,tp_dst=6081,geneve({class=0xffff,type=0x1,len=0}),flags(df))),6081
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - Delete Geneve option])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=geneve \
                    options:remote_ip=1.1.1.1 ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=0,len=4}->tun_metadata0,{class=0xffff,type=1,len=4}->tun_metadata1,{class=0xffff,type=2,len=4}->tun_metadata3"])

AT_DATA([flows.txt], [dnl
table=0,tun_metadata0=0x11112222,actions=set_field:0x55556666->tun_metadata1,resubmit(,1)
table=0,tun_metadata0=0x33334444,actions=delete_field:tun_metadata0,set_field:0x77778888->tun_metadata1,resubmit(,1)
table=0,tun_metadata0=0x88889999,actions=delete_field:tun_metadata3,resubmit(,1)
table=1,actions=IN_PORT
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0x11112222}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata0=0x11112222,tun_metadata1=NP,in_port=1,nw_ecn=0,nw_frag=no
Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,tp_dst=6081,geneve({class=0xffff,type=0,len=4,0x11112222}{class=0xffff,type=0x1,len=4,0x55556666}),flags(df))),6081
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0x33334444}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata0=0x33334444,tun_metadata1=NP,in_port=1,nw_ecn=0,nw_frag=no
Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,tp_dst=6081,geneve({class=0xffff,type=0x1,len=4,0x77778888}),flags(df))),6081
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0x88889999}),flags(df|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=+df-csum+key,tun_metadata0=0x88889999,in_port=1,nw_ecn=0,nw_frag=no
Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,tp_dst=6081,geneve({class=0xffff,type=0,len=4,0x88889999}),flags(df))),6081
])
OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - concomitant IPv6 and IPv4 tunnels])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=vxlan \
                    options:remote_ip=1.1.1.1 ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=vxlan \
                    options:remote_ip=2001:cafe::1 ofport_request=2])
AT_DATA([flows.txt], [dnl
in_port=1,actions=2
in_port=2,actions=1
])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0,src=1.1.1.1,dst=1.1.1.2,ttl=64),in_port(4789)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(ipv6_dst=2001:cafe::1,ttl=64,tp_dst=4789,flags(df))),4789
])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'tunnel(tun_id=0x0,ipv6_src=2001:cafe::1,ipv6_dst=2001:cafe::2,ttl=64),in_port(4789)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(dst=1.1.1.1,ttl=64,tp_dst=4789,flags(df))),4789
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - concomitant incompatible tunnels on the same port])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=vxlan \
                    options:remote_ip=flow ofport_request=1])

AT_CHECK([ovs-vsctl add-port br0 p2 -- set Interface p2 type=vxlan \
                    options:remote_ip=flow options:exts=gbp options:key=1 ofport_request=2], [0],
  [], [ignore])

AT_CHECK([grep 'p2: could not set configuration (File exists)' ovs-vswitchd.log | sed "s/^.*\(p2:.*\)$/\1/"], [0],
  [p2: could not set configuration (File exists)
])

OVS_VSWITCHD_STOP(["/p2: VXLAN-GBP, and non-VXLAN-GBP tunnels can't be configured on the same dst_port/d
/p2: could not set configuration (File exists)/d"])
AT_CLEANUP

AT_SETUP([tunnel - concomitant incompatible tunnels on different ports])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=vxlan \
                    options:remote_ip=flow ofport_request=1])

AT_CHECK([ovs-vsctl add-port br0 p2 -- set Interface p2 type=vxlan options:dst_port=9000 \
                    options:remote_ip=flow options:exts=gbp ofport_request=2])

AT_CHECK([grep p2 ovs-vswitchd.log | sed "s/^.*\(bridge br0:.*\)$/\1/"], [0],
  [bridge br0: added interface p2 on port 2
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - Mix Geneve/GRE options])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=geneve \
                    options:remote_ip=1.1.1.1 options:csum=true ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2 ofport_request=2 \
                    -- add-port br0 p3 -- set Interface p3 type=gre \
                    options:remote_ip=2.2.2.2 options:csum=false options:key=123 ofport_request=3])
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

AT_DATA([flows.txt], [dnl
priority=1,in_port=1,actions=3
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-ofctl dump-flows br0 | ofctl_strip | sort],
[0], [dnl
 priority=1,in_port=1 actions=output:3
NXST_FLOW reply:
])

dnl the input packet from geneve tunnel has flags(-df+csum+key) flags, making
dnl sure that the output gre tunnel has (+df-csum+key).
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0x12345678}),flags(csum|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=-df+csum+key,in_port=1,nw_ecn=0,nw_frag=no
Datapath actions: set(tunnel(tun_id=0x7b,dst=2.2.2.2,ttl=64,flags(df|key))),1
])

AT_CHECK([ovs-ofctl add-tlv-map br0 "{class=0xffff,type=0,len=4}->tun_metadata0"])
AT_CHECK([ovs-ofctl del-flows br0])

AT_DATA([flows2.txt], [dnl
priority=1,in_port=1,tun_metadata0=0x123, actions=3
])
AT_CHECK([ovs-ofctl add-flows br0 flows2.txt])

AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x0,src=1.1.1.1,dst=1.1.1.2,ttl=64,geneve({class=0xffff,type=0,len=4,0x123}),flags(csum|key)),in_port(6081),skb_mark(0),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,eth,ip,tun_id=0,tun_src=1.1.1.1,tun_dst=1.1.1.2,tun_tos=0,tun_flags=-df+csum+key,tun_metadata0=0x123,in_port=1,nw_ecn=0,nw_frag=no
Datapath actions: set(tunnel(tun_id=0x7b,dst=2.2.2.2,ttl=64,flags(df|key))),1
])

dnl without the fix, the actions have geneve options:
dnl set(tunnel(tun_id=0x7b,dst=2.2.2.2,ttl=64,geneve({class=0xffff,type=0,len=4,0x123}),flags(df|key))),1
dnl which is not correct

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - neighbor entry add and deletion])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gre \
                    options:remote_ip=1.1.1.1 options:local_ip=2.2.2.2 \
                    options:key=5 ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=gre \
                    options:local_ip=3.3.3.3 options:remote_ip=4.4.4.4 \
                    ofport_request=2])
AT_CHECK([ovs-vsctl add-br br1 -- set bridge br1 datapath_type=dummy], [0])

dnl Populate tunnel neighbor cache table
AT_CHECK([
    ovs-appctl tnl/arp/set p1 10.0.0.1 00:00:10:00:00:01
    ovs-appctl tnl/arp/set p1 10.0.0.2 00:00:10:00:00:02
    ovs-appctl tnl/arp/set p2 10.0.1.1 00:00:10:00:01:01
    ovs-appctl tnl/arp/set br0 10.0.2.1 00:00:10:00:02:01
    ovs-appctl tnl/arp/set br0 10.0.2.2 00:00:10:00:02:02
    ovs-appctl tnl/arp/set br1 20.0.0.1 00:00:20:00:00:01
], [0], [stdout])

AT_CHECK([ovs-appctl tnl/neigh/show | tail -n+3 | sort], [0], [dnl
10.0.0.1                                      00:00:10:00:00:01   p1
10.0.0.2                                      00:00:10:00:00:02   p1
10.0.1.1                                      00:00:10:00:01:01   p2
10.0.2.1                                      00:00:10:00:02:01   br0
10.0.2.2                                      00:00:10:00:02:02   br0
20.0.0.1                                      00:00:20:00:00:01   br1
])

dnl neighbor table after deleting port p1
AT_CHECK([ovs-vsctl del-port br0 p1],[0], [stdout])
AT_CHECK([ovs-appctl tnl/neigh/show | tail -n+3 | grep -w p1 | sort], [0], [dnl
])

dnl neighbor table after deleting bridge br0
AT_CHECK([ovs-vsctl del-br br0],[0], [stdout])
AT_CHECK([ovs-appctl tnl/neigh/show | tail -n+3 | sort], [0], [dnl
20.0.0.1                                      00:00:20:00:00:01   br1
])

dnl neighbor table after deleting bridge br1
AT_CHECK([ovs-vsctl del-br br1],[0], [stdout])
AT_CHECK([ovs-appctl tnl/neigh/show | tail -n+3 | sort], [0], [dnl
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - GTP-U basic])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=gtpu \
                    options:remote_ip=1.1.1.1 \
                    options:key=123 ofport_request=1])

AT_CHECK([ovs-appctl dpif/show | tail -n +3], [0], [dnl
    br0 65534/100: (dummy-internal)
    p1 1/2152: (gtpu: key=123, remote_ip=1.1.1.1)
])

AT_CHECK([ovs-appctl tnl/ports/show |sort], [0], [dnl
Listening ports:
gtpu_sys_2152 (2152) ref_cnt=1
])

OVS_VSWITCHD_STOP
AT_CLEANUP

AT_SETUP([tunnel - GTP-U push and pop])
OVS_VSWITCHD_START([add-port br0 p1 -- set Interface p1 type=dummy \
                    ofport_request=1 \
                    -- add-port br0 p2 -- set Interface p2 type=dummy \
                    ofport_request=2])

# Add these ports separately to ensure that they get the datapath port
# number expected below.
ovs-vsctl -- add-port br0 p3 \
          -- set Interface p3 type=gtpu \
                              ofport_request=3 \
                              options:remote_ip=1.1.1.1 \
                              options:key=3 \
                              options:packet_type=legacy_l3
ovs-vsctl -- add-port br0 p4 \
          -- set Interface p4 type=gtpu \
                              ofport_request=4 \
                              options:remote_ip=1.1.1.2 \
                              options:key=4 \
                              options:packet_type=legacy_l3
OVS_VSWITCHD_DISABLE_TUNNEL_PUSH_POP

dnl AT_CHECK([ovs-appctl dpif/show | tail -n +4], [0], [dnl
AT_CHECK([ovs-appctl dpif/show | tail -n +4], [0], [dnl
    p1 1/1: (dummy)
    p2 2/2: (dummy)
    p3 3/2152: (gtpu: key=3, remote_ip=1.1.1.1)
    p4 4/2152: (gtpu: key=4, remote_ip=1.1.1.2)
])

AT_DATA([flows.txt], [dnl
in_port=1,actions=3
in_port=2,actions=4
in_port=3,tun_gtpu_flags=0x30,tun_gtpu_msgtype=255,actions=1
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])

AT_CHECK([ovs-appctl tnl/ports/show |sort], [0], [dnl
Listening ports:
gtpu_sys_2152 (2152) ref_cnt=2
])

dnl Encap: in_port=1,actions=3
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'in_port(1),eth(src=50:54:00:00:00:05,dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)'], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: set(tunnel(tun_id=0x3,dst=1.1.1.1,ttl=64,tp_dst=2152,flags(df|key))),pop_eth,2152
])

dnl receive packet from GTP-U port, match it, and output to layer3 GRE
AT_CHECK([ovs-appctl ofproto/trace ovs-dummy 'recirc_id(0),tunnel(tun_id=0x3,src=1.1.1.1,dst=2.2.2.2,ttl=64,gtpu(flags=0x30,msgtype=255),flags(df|key)),in_port(2152),packet_type(ns=1,id=0),skb_mark(0),ipv4(frag=no)'], [0], [stdout])
AT_CHECK([tail -2 stdout], [0],
  [Megaflow: recirc_id=0,packet_type=(1,0),tun_id=0x3,tun_src=1.1.1.1,tun_dst=2.2.2.2,tun_tos=0,gtpu_flags=0x30,gtpu_msgtype=255,tun_flags=+df-csum+key,in_port=3,dl_type=0x0000
Datapath actions: push_eth(src=00:00:00:00:00:00,dst=00:00:00:00:00:00),1
])

OVS_VSWITCHD_STOP
AT_CLEANUP
